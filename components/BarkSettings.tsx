import { useState } from 'react';
import { BarkSettings } from '../types/bark';

interface BarkSettingsProps {
  settings: BarkSettings;
  onSettingsChange: (settings: BarkSettings) => void;
}

export const BarkSettingsPanel: React.FC<BarkSettingsProps> = ({
  settings,
  onSettingsChange,
}) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const handleSettingChange = (key: keyof BarkSettings, value: number) => {
    onSettingsChange({
      ...settings,
      [key]: value,
    });
  };

  return (
    <div className="bg-dark-card border border-gray-600 rounded-lg p-4">
      <button
        onClick={() => setIsExpanded(!isExpanded)}
        className="flex items-center justify-between w-full text-left"
      >
        <h3 className="text-lg font-semibold text-dark-text">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bark</h3>
        <svg
          className={`w-5 h-5 text-dark-text transition-transform ${isExpanded ? 'rotate-180' : ''}`}
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      {isExpanded && (
        <div className="mt-4 space-y-4">
          <div>
            <label className="block text-sm text-dark-text-secondary mb-2">
              –°–∫–æ—Ä–æ—Å—Ç—å: {settings.speed}x
            </label>
            <input
              type="range"
              min="0.5"
              max="2.0"
              step="0.1"
              value={settings.speed}
              onChange={(e) => handleSettingChange('speed', parseFloat(e.target.value))}
              className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer"
            />
          </div>

          <div>
            <label className="block text-sm text-dark-text-secondary mb-2">
              –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {settings.temperature}
            </label>
            <input
              type="range"
              min="0.0"
              max="1.0"
              step="0.01"
              value={settings.temperature}
              onChange={(e) => handleSettingChange('temperature', parseFloat(e.target.value))}
              className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer"
            />
            <p className="text-xs text-dark-text-secondary mt-1">
              –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0 = –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, 1 = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–π)
            </p>
          </div>

          <div>
            <label className="block text-sm text-dark-text-secondary mb-2">
              Top-K: {settings.top_k}
            </label>
            <input
              type="range"
              min="1"
              max="100"
              step="1"
              value={settings.top_k}
              onChange={(e) => handleSettingChange('top_k', parseInt(e.target.value))}
              className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer"
            />
            <p className="text-xs text-dark-text-secondary mt-1">
              –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ —Ç–æ–ª—å–∫–æ —Ç–æ–ø-K –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–º–∏
            </p>
          </div>

          <div>
            <label className="block text-sm text-dark-text-secondary mb-2">
              Top-P: {settings.top_p}
            </label>
            <input
              type="range"
              min="0.0"
              max="1.0"
              step="0.01"
              value={settings.top_p}
              onChange={(e) => handleSettingChange('top_p', parseFloat(e.target.value))}
              className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer"
            />
            <p className="text-xs text-dark-text-secondary mt-1">
              Nucleus sampling - –≤—ã–±–∏—Ä–∞–µ—Ç –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é P
            </p>
          </div>

          <div>
            <label className="block text-sm text-dark-text-secondary mb-2">
              Waveform Temperature: {settings.waveform_temp}
            </label>
            <input
              type="range"
              min="0.0"
              max="1.0"
              step="0.01"
              value={settings.waveform_temp}
              onChange={(e) => handleSettingChange('waveform_temp', parseFloat(e.target.value))}
              className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer"
            />
            <p className="text-xs text-dark-text-secondary mt-1">
              –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ–≤–æ–ª–Ω—ã
            </p>
          </div>

          <div className="pt-4 border-t border-gray-600">
            <h4 className="text-sm font-semibold text-dark-text mb-3">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞</h4>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm text-dark-text-secondary mb-2">
                  Repetition Penalty: {settings.repetition_penalty || 1.0}
                </label>
                <input
                  type="range"
                  min="0.8"
                  max="1.5"
                  step="0.1"
                  value={settings.repetition_penalty || 1.0}
                  onChange={(e) => handleSettingChange('repetition_penalty', parseFloat(e.target.value))}
                  className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer"
                />
                <p className="text-xs text-dark-text-secondary mt-1">
                  –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (1.0 = –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞, 1.2 = —É–º–µ—Ä–µ–Ω–Ω—ã–π —à—Ç—Ä–∞—Ñ)
                </p>
              </div>

              <div>
                <label className="block text-sm text-dark-text-secondary mb-2">
                  Length Penalty: {settings.length_penalty || 1.0}
                </label>
                <input
                  type="range"
                  min="0.5"
                  max="2.0"
                  step="0.1"
                  value={settings.length_penalty || 1.0}
                  onChange={(e) => handleSettingChange('length_penalty', parseFloat(e.target.value))}
                  className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer"
                />
                <p className="text-xs text-dark-text-secondary mt-1">
                  –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–ª–∏–Ω—ã –∞—É–¥–∏–æ (1.0 = –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞)
                </p>
              </div>
            </div>

            <div className="pt-4 border-t border-gray-600">
              <h4 className="text-sm font-semibold text-dark-text mb-3">–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏</h4>
              <div className="grid grid-cols-2 gap-2 mb-4">
                <button
                  onClick={() => onSettingsChange({
                    speed: 1.0,
                    temperature: 0.2,
                    top_k: 15,
                    top_p: 0.7,
                    waveform_temp: 0.3,
                    repetition_penalty: 1.2,
                    length_penalty: 1.0,
                  })}
                  className="px-3 py-2 text-xs bg-blue-600 text-white rounded hover:bg-blue-500 transition-colors"
                >
                  üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                </button>
                <button
                  onClick={() => onSettingsChange({
                    speed: 1.0,
                    temperature: 0.4,
                    top_k: 25,
                    top_p: 0.85,
                    waveform_temp: 0.5,
                    repetition_penalty: 1.1,
                    length_penalty: 1.0,
                  })}
                  className="px-3 py-2 text-xs bg-green-600 text-white rounded hover:bg-green-500 transition-colors"
                >
                  ‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
                </button>
                <button
                  onClick={() => onSettingsChange({
                    speed: 1.0,
                    temperature: 0.1,
                    top_k: 10,
                    top_p: 0.6,
                    waveform_temp: 0.2,
                    repetition_penalty: 1.3,
                    length_penalty: 0.9,
                  })}
                  className="px-3 py-2 text-xs bg-purple-600 text-white rounded hover:bg-purple-500 transition-colors"
                >
                  üé≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å
                </button>
                <button
                  onClick={() => onSettingsChange({
                    speed: 1.0,
                    temperature: 0.3,
                    top_k: 20,
                    top_p: 0.8,
                    waveform_temp: 0.4,
                    repetition_penalty: 1.1,
                    length_penalty: 1.0,
                  })}
                  className="px-3 py-2 text-xs bg-gray-600 text-white rounded hover:bg-gray-500 transition-colors"
                >
                  üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}; 